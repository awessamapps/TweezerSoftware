{"ast":null,"code":"var _jsxFileName = \"F:\\\\tweezerui\\\\src\\\\components\\\\Hologram\\\\Hologram.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap CSS is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer() {\n  _s();\n  const [imageSrc, setImageSrc] = useState('');\n  const [fps, setFps] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [dataReceived, setDataReceived] = useState(0);\n  const [isChecked, setIsChecked] = useState(true); // Initialize to true if you want it checked initially\n\n  // Handler to toggle the checked state\n  const handleCheckboxChange = () => {\n    setIsChecked(!isChecked);\n  };\n  const [someVariable, setSomeVariable] = useState('');\n  useEffect(() => {\n    let x = 0;\n    const intervalId = setInterval(() => {\n      x++;\n      const copyX = x;\n      setSomeVariable(copyX);\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    return;\n    let frameCount = 0;\n    let dataCount = 0;\n    const websocket = new WebSocket('ws://10.0.63.153:3010/ws');\n    websocket.binaryType = 'blob'; // Since the images can be in binary format\n\n    const updateFpsAndSpeed = () => {\n      setFps(frameCount);\n      setSpeed(dataCount / 1024); // Speed in KB/s\n      frameCount = 0;\n      dataCount = 0;\n    };\n    const intervalId = setInterval(updateFpsAndSpeed, 1000); // Update FPS and speed every second\n\n    websocket.onmessage = event => {\n      const url = URL.createObjectURL(event.data);\n      setImageSrc(url);\n      frameCount++;\n      dataCount += event.data.size; // Add the size of the received data\n    };\n    websocket.onopen = () => console.log('Connected to server');\n    websocket.onerror = error => console.error('WebSocket error:', error);\n    websocket.onclose = () => {\n      console.log('Disconnected from server');\n      clearInterval(intervalId);\n    };\n    return () => {\n      websocket.close();\n      clearInterval(intervalId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hologram generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: someVariable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageViewer, \"uAyUUY1ghGmzPhwsx/SLPW5ea9M=\");\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ImageViewer","_s","imageSrc","setImageSrc","fps","setFps","speed","setSpeed","dataReceived","setDataReceived","isChecked","setIsChecked","handleCheckboxChange","someVariable","setSomeVariable","x","intervalId","setInterval","copyX","frameCount","dataCount","websocket","WebSocket","binaryType","updateFpsAndSpeed","onmessage","event","url","URL","createObjectURL","data","size","onopen","console","log","onerror","error","onclose","clearInterval","close","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/tweezerui/src/components/Hologram/Hologram.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap CSS is imported\r\n\r\n\r\nfunction ImageViewer() {\r\n    const [imageSrc, setImageSrc] = useState('');\r\n    const [fps, setFps] = useState(0);\r\n    const [speed, setSpeed] = useState(0);\r\n    const [dataReceived, setDataReceived] = useState(0);\r\n\r\n    const [isChecked, setIsChecked] = useState(true); // Initialize to true if you want it checked initially\r\n\r\n    // Handler to toggle the checked state\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(!isChecked);\r\n    };\r\n\r\n    const [someVariable, setSomeVariable] = useState('');\r\n\r\n    useEffect(() => {\r\n\r\n        let x = 0;\r\n\r\n        const intervalId = setInterval(() => {\r\n            x++;\r\n            const copyX = x;\r\n            setSomeVariable(copyX);\r\n        }\r\n            , 1000);\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        return;\r\n\r\n       \r\n        let frameCount = 0;\r\n        let dataCount = 0;\r\n        const websocket = new WebSocket('ws://10.0.63.153:3010/ws');\r\n        websocket.binaryType = 'blob';  // Since the images can be in binary format\r\n\r\n        const updateFpsAndSpeed = () => {\r\n            setFps(frameCount);\r\n            setSpeed(dataCount / 1024);  // Speed in KB/s\r\n            frameCount = 0;\r\n            dataCount = 0;\r\n        };\r\n\r\n        const intervalId = setInterval(updateFpsAndSpeed, 1000); // Update FPS and speed every second\r\n\r\n        websocket.onmessage = (event) => {\r\n            const url = URL.createObjectURL(event.data);\r\n            setImageSrc(url);\r\n            frameCount++;\r\n            dataCount += event.data.size;  // Add the size of the received data\r\n        };\r\n\r\n        websocket.onopen = () => console.log('Connected to server');\r\n        websocket.onerror = (error) => console.error('WebSocket error:', error);\r\n        websocket.onclose = () => {\r\n            console.log('Disconnected from server');\r\n            clearInterval(intervalId);\r\n        };\r\n\r\n        return () => {\r\n            websocket.close();\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h1>Hologram generator</h1>\r\n            <h1>{someVariable}</h1>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageViewer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}