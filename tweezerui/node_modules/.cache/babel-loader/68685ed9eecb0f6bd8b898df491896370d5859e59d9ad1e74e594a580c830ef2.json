{"ast":null,"code":"var _jsxFileName = \"F:\\\\TweezerSoftware\\\\tweezerui\\\\src\\\\components\\\\Hologram\\\\HologramOptions.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Collapse, CardBody, Card, CardTitle, Input } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport { Form, Button } from 'react-bootstrap';\nimport { useGlobalContext } from '../../GlobalContext';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Slide } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HologramOptions() {\n  // const { serverInfo, hologramOptions, sethologramOptions } = useGlobalContext();\n\n  // const [hologramOptionsWebsocket, sethologramOptionsWebsocket] = useState(null);\n\n  // const hologramOptionsServerURL = `http://${serverInfo.hologramOptionsserver[1].ip}:${serverInfo.hologramOptionsserver[1].portHTTP}`;\n\n  // const toggle = () => {\n  //     sethologramOptions(prev => ({ ...prev, isCollapsed: !prev.isCollapsed }));\n  // };\n\n  // const [imageKey, setImageKey] = useState(Date.now());\n\n  // useEffect(() => {\n  //     const interval = setInterval(() => {\n  //         setImageKey(Date.now());\n  //     }, 2000);\n  //     return () => clearInterval(interval);\n  // }, []);\n\n  // const handleUpdateClick = () => {\n\n  //     // check the if the set point is a valid number\n  //     if (isNaN(hologramOptions.setPointSetAt)) {\n  //         showToast('Set Point should be a valid number', 'error');\n  //         return;\n  //     }\n\n  //     // check for min max values\n  //     if (hologramOptions.setPointSetAt < hologramOptions.minSetPoint || hologramOptions.setPointSetAt > hologramOptions.maxSetPoint) {\n  //         showToast(`Set Point should be between ${hologramOptions.minSetPoint} and ${hologramOptions.maxSetPoint}`, 'error');\n  //         return;\n  //     }\n\n  //     // post temperature in json to 10.0.63.153:4031/set_temperature\n  //     axios.post(`${hologramOptionsServerURL}/set_temperature`, {\n  //         temperature: hologramOptions.setPointSetAt\n  //     })\n  //         .then((response) => {\n  //             showToast('Set Point Updated Successfully', 'success');\n  //         })\n  //         .catch((error) => {\n  //             showToast('Failed to update Set Point', 'error');\n  //         });\n\n  // }\n\n  // const showToast = (msg, type, delay = 2000) => {\n  //     toast[type](msg, {\n  //         position: \"bottom-right\",\n  //         autoClose: delay,\n  //         hideProgressBar: false,\n  //         closeOnClick: true,\n  //         pauseOnHover: true,\n  //         draggable: true,\n  //         progress: undefined,\n  //         theme: \"dark\",\n  //         transition: Slide,\n  //     });\n  // };\n\n  // useEffect(() => {\n\n  //     const connectToWebSocketForTrackDetails = () => {\n  //         if (hologramOptionsWebsocket) {\n  //             return;\n  //         }\n\n  //         const ws = new WebSocket(`ws://${serverInfo.hologramOptionsserver[1].ip}:${serverInfo.hologramOptionsserver[1].portWS}/ws`);\n  //         console.log(\"Trying to connect to websocket: Objective hologramOptions\")\n  //         ws.onmessage = (event) => {\n  //             const data = JSON.parse(event.data);\n  //             sethologramOptions(prev => ({\n  //                 ...prev,\n  //                 setPoint: data.set_point,\n  //                 objectiveTemperature: data.objective_temperature,\n  //                 lastUpdated: new Date().toLocaleTimeString(),\n  //                 // timeSeriesSetPoints : data.time_series_set_points,\n  //                 // timeSeriesObjectiveTemperatures : data.time_series_objective_temperatures,\n  //                 // timeSeriesTimes : data.time_series_times\n  //             }));\n  //         };\n\n  //         ws.onopen = () => {\n  //             console.log(`Connected to objective hologramOptions server`);\n  //         };\n  //         ws.onerror = (error) => console.error('WebSocket error track server:', error);\n  //         ws.onclose = () => {\n  //             sethologramOptions(prev => ({ ...prev, isOnline: false }));\n  //             sethologramOptionsWebsocket(null);\n  //             console.log(`Disconnected from objective hologramOptions server`);\n  //             setTimeout(() => connectToWebSocketForTrackDetails(), 1000);\n  //         };\n\n  //         sethologramOptionsWebsocket(ws);\n  //     };\n\n  //     connectToWebSocketForTrackDetails();\n\n  // }, []);\n\n  // useEffect(() => {\n\n  //     const intervalId = setInterval(() =>\n  //         axios.get(`${hologramOptionsServerURL}/heartbeat`)\n  //             .then(() => {\n  //                 sethologramOptions(prev => ({ ...prev, isOnline: true }));\n  //             })\n  //             .catch(() => {\n  //                 sethologramOptions(prev => ({ ...prev, isOnline: false }));\n  //             })\n  //         , 1000);\n\n  //     return () => clearInterval(intervalId);\n\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: toggle,\n      style: {\n        backgroundColor: \"white\",\n        display: 'flex',\n        justifyContent: 'space-between',\n        borderTopLeftRadius: '10px',\n        borderTopRightRadius: '10px',\n        borderBottomLeftRadius: '0px',\n        borderBottomRightRadius: '0px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fs-5 fw-bold\",\n          style: {\n            margin: '0px',\n            padding: '10px',\n            color: \"black\"\n          },\n          children: \"Objective Heater\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: '10px',\n            width: '10px',\n            backgroundColor: heater.isOnline ? 'green' : 'red',\n            borderRadius: '50%',\n            display: 'inline-block',\n            marginLeft: '5px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fs-5 fw-bold\",\n        style: {\n          marginLeft: 'auto',\n          padding: '10px',\n          color: \"black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: heater.isCollapsed ? faChevronUp : faChevronDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n_c = HologramOptions;\nexport default HologramOptions;\nvar _c;\n$RefreshReg$(_c, \"HologramOptions\");","map":{"version":3,"names":["React","useState","useEffect","Collapse","CardBody","Card","CardTitle","Input","FontAwesomeIcon","faChevronDown","faChevronUp","Form","Button","useGlobalContext","axios","ToastContainer","toast","Slide","jsxDEV","_jsxDEV","HologramOptions","children","onClick","toggle","style","backgroundColor","display","justifyContent","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","alignItems","className","margin","padding","color","fileName","_jsxFileName","lineNumber","columnNumber","height","width","heater","isOnline","borderRadius","marginLeft","icon","isCollapsed","_c","$RefreshReg$"],"sources":["F:/TweezerSoftware/tweezerui/src/components/Hologram/HologramOptions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Collapse, CardBody, Card, CardTitle, Input } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useGlobalContext } from '../../GlobalContext';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Slide } from 'react-toastify';\r\n\r\n\r\nfunction HologramOptions() {\r\n\r\n\r\n    // const { serverInfo, hologramOptions, sethologramOptions } = useGlobalContext();\r\n\r\n\r\n    // const [hologramOptionsWebsocket, sethologramOptionsWebsocket] = useState(null);\r\n\r\n    // const hologramOptionsServerURL = `http://${serverInfo.hologramOptionsserver[1].ip}:${serverInfo.hologramOptionsserver[1].portHTTP}`;\r\n\r\n    // const toggle = () => {\r\n    //     sethologramOptions(prev => ({ ...prev, isCollapsed: !prev.isCollapsed }));\r\n    // };\r\n\r\n    // const [imageKey, setImageKey] = useState(Date.now());\r\n\r\n    // useEffect(() => {\r\n    //     const interval = setInterval(() => {\r\n    //         setImageKey(Date.now());\r\n    //     }, 2000);\r\n    //     return () => clearInterval(interval);\r\n    // }, []);\r\n\r\n\r\n    // const handleUpdateClick = () => {\r\n\r\n    //     // check the if the set point is a valid number\r\n    //     if (isNaN(hologramOptions.setPointSetAt)) {\r\n    //         showToast('Set Point should be a valid number', 'error');\r\n    //         return;\r\n    //     }\r\n\r\n    //     // check for min max values\r\n    //     if (hologramOptions.setPointSetAt < hologramOptions.minSetPoint || hologramOptions.setPointSetAt > hologramOptions.maxSetPoint) {\r\n    //         showToast(`Set Point should be between ${hologramOptions.minSetPoint} and ${hologramOptions.maxSetPoint}`, 'error');\r\n    //         return;\r\n    //     }\r\n\r\n    //     // post temperature in json to 10.0.63.153:4031/set_temperature\r\n    //     axios.post(`${hologramOptionsServerURL}/set_temperature`, {\r\n    //         temperature: hologramOptions.setPointSetAt\r\n    //     })\r\n    //         .then((response) => {\r\n    //             showToast('Set Point Updated Successfully', 'success');\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             showToast('Failed to update Set Point', 'error');\r\n    //         });\r\n\r\n    // }\r\n\r\n    // const showToast = (msg, type, delay = 2000) => {\r\n    //     toast[type](msg, {\r\n    //         position: \"bottom-right\",\r\n    //         autoClose: delay,\r\n    //         hideProgressBar: false,\r\n    //         closeOnClick: true,\r\n    //         pauseOnHover: true,\r\n    //         draggable: true,\r\n    //         progress: undefined,\r\n    //         theme: \"dark\",\r\n    //         transition: Slide,\r\n    //     });\r\n    // };\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n      \r\n\r\n    //     const connectToWebSocketForTrackDetails = () => {\r\n    //         if (hologramOptionsWebsocket) {\r\n    //             return;\r\n    //         }\r\n\r\n    //         const ws = new WebSocket(`ws://${serverInfo.hologramOptionsserver[1].ip}:${serverInfo.hologramOptionsserver[1].portWS}/ws`);\r\n    //         console.log(\"Trying to connect to websocket: Objective hologramOptions\")\r\n    //         ws.onmessage = (event) => {\r\n    //             const data = JSON.parse(event.data);\r\n    //             sethologramOptions(prev => ({\r\n    //                 ...prev,\r\n    //                 setPoint: data.set_point,\r\n    //                 objectiveTemperature: data.objective_temperature,\r\n    //                 lastUpdated: new Date().toLocaleTimeString(),\r\n    //                 // timeSeriesSetPoints : data.time_series_set_points,\r\n    //                 // timeSeriesObjectiveTemperatures : data.time_series_objective_temperatures,\r\n    //                 // timeSeriesTimes : data.time_series_times\r\n    //             }));\r\n    //         };\r\n\r\n    //         ws.onopen = () => {\r\n    //             console.log(`Connected to objective hologramOptions server`);\r\n    //         };\r\n    //         ws.onerror = (error) => console.error('WebSocket error track server:', error);\r\n    //         ws.onclose = () => {\r\n    //             sethologramOptions(prev => ({ ...prev, isOnline: false }));\r\n    //             sethologramOptionsWebsocket(null);\r\n    //             console.log(`Disconnected from objective hologramOptions server`);\r\n    //             setTimeout(() => connectToWebSocketForTrackDetails(), 1000);\r\n    //         };\r\n\r\n    //         sethologramOptionsWebsocket(ws);\r\n    //     };\r\n\r\n    //     connectToWebSocketForTrackDetails();\r\n\r\n\r\n    // }, []);\r\n\r\n\r\n    // useEffect(() => {\r\n\r\n    //     const intervalId = setInterval(() =>\r\n    //         axios.get(`${hologramOptionsServerURL}/heartbeat`)\r\n    //             .then(() => {\r\n    //                 sethologramOptions(prev => ({ ...prev, isOnline: true }));\r\n    //             })\r\n    //             .catch(() => {\r\n    //                 sethologramOptions(prev => ({ ...prev, isOnline: false }));\r\n    //             })\r\n    //         , 1000);\r\n\r\n    //     return () => clearInterval(intervalId);\r\n\r\n    // }, []);\r\n\r\n\r\n\r\n\r\n       \r\n    return (\r\n        <div>\r\n            <div onClick={toggle} style={{ backgroundColor: \"white\", display: 'flex', justifyContent: 'space-between', borderTopLeftRadius: '10px', borderTopRightRadius: '10px', borderBottomLeftRadius: '0px', borderBottomRightRadius: '0px' }}>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div className='fs-5 fw-bold' style={{ margin: '0px', padding: '10px', color: \"black\" }}>\r\n                        Objective Heater\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        height: '10px',\r\n                        width: '10px',\r\n                        backgroundColor: heater.isOnline ? 'green' : 'red',\r\n                        borderRadius: '50%',\r\n                        display: 'inline-block',\r\n                        marginLeft: '5px'\r\n                    }}>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='fs-5 fw-bold' style={{ marginLeft: 'auto', padding: '10px', color: \"black\" }}>\r\n                    <FontAwesomeIcon icon={heater.isCollapsed ? faChevronUp : faChevronDown} />\r\n                </div>\r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HologramOptions;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,EAAEC,KAAK,QAAQ,YAAY;AACvE,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,EAAEC,WAAW,QAAQ,mCAAmC;AAC9E,SAASC,IAAI,EAAEC,MAAM,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvC,SAASC,eAAeA,CAAA,EAAG;EAGvB;;EAGA;;EAEA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAGA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAMA,oBACID,OAAA;IAAAE,QAAA,eACIF,OAAA;MAAKG,OAAO,EAAEC,MAAO;MAACC,KAAK,EAAE;QAAEC,eAAe,EAAE,OAAO;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,eAAe;QAAEC,mBAAmB,EAAE,MAAM;QAAEC,oBAAoB,EAAE,MAAM;QAAEC,sBAAsB,EAAE,KAAK;QAAEC,uBAAuB,EAAE;MAAM,CAAE;MAAAV,QAAA,gBAClOF,OAAA;QAAKK,KAAK,EAAE;UAAEE,OAAO,EAAE,MAAM;UAAEM,UAAU,EAAE;QAAS,CAAE;QAAAX,QAAA,gBAClDF,OAAA;UAAKc,SAAS,EAAC,cAAc;UAACT,KAAK,EAAE;YAAEU,MAAM,EAAE,KAAK;YAAEC,OAAO,EAAE,MAAM;YAAEC,KAAK,EAAE;UAAQ,CAAE;UAAAf,QAAA,EAAC;QAEzF;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAENrB,OAAA;UAAKK,KAAK,EAAE;YACRiB,MAAM,EAAE,MAAM;YACdC,KAAK,EAAE,MAAM;YACbjB,eAAe,EAAEkB,MAAM,CAACC,QAAQ,GAAG,OAAO,GAAG,KAAK;YAClDC,YAAY,EAAE,KAAK;YACnBnB,OAAO,EAAE,cAAc;YACvBoB,UAAU,EAAE;UAChB;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAENrB,OAAA;QAAKc,SAAS,EAAC,cAAc;QAACT,KAAK,EAAE;UAAEsB,UAAU,EAAE,MAAM;UAAEX,OAAO,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAf,QAAA,eACzFF,OAAA,CAACX,eAAe;UAACuC,IAAI,EAAEJ,MAAM,CAACK,WAAW,GAAGtC,WAAW,GAAGD;QAAc;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1E,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEd;AAACS,EAAA,GA5JQ7B,eAAe;AA8JxB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}